---
import { Image } from 'astro:assets'
import { getCollection } from 'astro:content'

const allProjects = await getCollection('projects')

interface Props {
  title: string
}

const { title } = Astro.props
---

<!-- Projects Grid Section --><!-- <div class='row justify-content-md-center py-3 py-md-5 py-xl-8'>
  <div class='col-12 col-md-10 col-lg-8 col-xl-7 col-xxl-6'>
    <h2 class='mb-4 display-5 text-center'>Projekty</h2>
    <p class='text-secondary mb-3 text-center'>
      Naše projekty pokrývajú široké spektrum certifikovaných budov — od administratívnych centier
      až po logistické parky
    </p>
  </div>
</div> -->
<header class='row mb-1'>
  <div class='col-12 col-lg-8'>
    <h2 class='text-gray-300 display-1 fw-bold lh-1 mb-0'>{title}</h2>
  </div>
</header>

<!-- Responsive CSS Grid for Projects -->
<div class='project-grid'>
  {
    allProjects.map((project: any) => (
      <div class='project-card-wrapper'>
        <a href={`/projects/${project.id}`} class='link-dark'>
          <figure class='project-card'>
            <div class='image-wrapper'>
              <Image
                src={
                  project.data.image_cover
                    ? project.data.image_cover
                    : 'https://placehold.co/400x400'
                }
                width='1200'
                height='1200'
                class='figure-img'
                alt={`Cover image for project ${project.data.title}`}
              />
            </div>
            <figcaption class='text-primary mb-0'>
              <p class='mb-0 border-bottom text-uppercase'>{project.data.certificate}</p>
              <p class='mb-0 border-bottom text-uppercase'>{project.data.title}</p>
              <p class='mb-0 border-bottom text-uppercase'>
                {project.data.location_city} – {project.data.location_country}
              </p>
              <p class='mb-0 text-uppercase'>{project.data.client}</p>
            </figcaption>
          </figure>
        </a>
      </div>
    ))
  }
</div>

<script is:inline>
  // align borders of figcaption paragraphs if they wrap to multiple lines
  document.addEventListener('DOMContentLoaded', () => {
    const paras = document.querySelectorAll('figcaption p')

    function adjustBorders() {
      paras.forEach((p) => {
        p.style.paddingBottom = '' // reset first
        const lh = parseFloat(getComputedStyle(p).lineHeight)
        if (p.offsetHeight > lh * 1.5) {
          p.style.paddingBottom = '1px'
        }
      })
    }

    adjustBorders()

    let resizeTimer
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimer)
      resizeTimer = setTimeout(adjustBorders, 150)
    })
  })
</script>

<style>
  .project-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 0.25rem;
  }

  .project-card-wrapper {
    width: 100%;
  }

  .project-card {
    position: relative;
    overflow: hidden;
    margin: 0;

    transition: transform 0.2s ease;
  }

  .image-wrapper {
    width: 100%;
    aspect-ratio: 1 / 1;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .figure-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    margin-bottom: 0;
  }

  a {
    text-decoration: none;
  }

  figcaption {
    font-size: 14px;
  }

  /* TODO: consider using animation for figcaption when they are always visible */
  /* data-aos-offset='0'
    data-aos='fade-up'
    data-aos-duration='1500' */

  /* use code below for hover only figcaption---- */

  /* .figure-caption {
    padding: 1rem;
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .project-card:hover .figure-caption {
    opacity: 1;
  } */
</style>
