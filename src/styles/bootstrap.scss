// Optional variable overrides
$enable-negative-margins: true;

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1640px
);

$position-values: (
  0: 0,
  25: 25%,
  50: 50%,
  75: 75%,
  100: 100%
);

// TODO: DECIDE WHETHER TO CHANGE THE GREEN COLOR FOR MORE ACCESSIBLE ONE NOW OR WAIT FOR REBRANDING
// with 3.87:1 contrast ration this green does not meet most WCAG AAA standards (fails at WCAG AA & AAA for normal text, and fails at WCAG AAA and passess at WCAG AA for large text)
// with 7.15:1 contrast ration this grey meets criteria  WCAG AAA standards even for both normal (14pt / 18.66px) and large (18pt / 24px) text

// lightest black to be used on white bg is #595959 with 7:1 contrast ratio but I prefer #545454 with 7.57:1 contrast ratio
// darkest white to be used on black bg is #959595 with 7.01:1 contrast ratio
// but I think for white on black smaller text, better to use #C3C4C3 with 12:1 contrast ratio or #ADADAD 9.35:1

$primary: #289448; // new: primary: #004e3c ; new secondary: #28B55F ; old: #289448;
$secondary: #51595d;
$font-size-base: 1.2rem;
$line-height-base: 1.5;
// $font-size-base: 1.2rem;
// $line-height-base: 1.5;

// $font-family-sans-serif: 'Arial', system-ui, sans-serif;
// $font-family-sans-serif: 'Verdana', system-ui, sans-serif;
// $font-family-sans-serif: 'Calibri', system-ui, sans-serif;

// $font-family-sans-serif: 'IBM Plex Sans', system-ui, sans-serif;
// $font-family-sans-serif: 'Onest', system-ui, sans-serif;
// $font-family-sans-serif: 'Source Sans 3', system-ui, sans-serif;

// $font-family-sans-serif: 'Sofia Sans', system-ui, sans-serif;
// $font-family-sans-serif: 'Nunito Sans', system-ui, sans-serif;

// $font-family-sans-serif: 'Inter', system-ui, sans-serif;

$font-family-sans-serif: 'Atkinson Hyperlegible Next', system-ui, sans-serif;

$font-family-base: $font-family-sans-serif;

$spacer: $line-height-base * 1rem;
$spacers: (
  0: 0,
  1: $spacer * 0.5,
  2: $spacer * 1,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 3
);

// Required functions import
@import 'bootstrap/scss/functions';

// Required imports
@import 'bootstrap/scss/variables';
@import 'bootstrap/scss/variables-dark';
@import 'bootstrap/scss/maps';
@import 'bootstrap/scss/mixins';
@import 'bootstrap/scss/root';

// Import everything
// @import 'bootstrap/scss/bootstrap';

// or..

// Optional components
@import 'bootstrap/scss/utilities';
@import 'bootstrap/scss/reboot';
@import 'bootstrap/scss/type';
@import 'bootstrap/scss/containers';
@import 'bootstrap/scss/images';
@import 'bootstrap/scss/nav';
@import 'bootstrap/scss/accordion';
// @import 'bootstrap/scss/alert';
// @import 'bootstrap/scss/badge';
// @import 'bootstrap/scss/breadcrumb';
@import 'bootstrap/scss/button-group';
@import 'bootstrap/scss/buttons';
@import 'bootstrap/scss/card';
// @import 'bootstrap/scss/carousel';
@import 'bootstrap/scss/close';
@import 'bootstrap/scss/dropdown';
@import 'bootstrap/scss/forms';
@import 'bootstrap/scss/grid';
@import 'bootstrap/scss/list-group';
// @import 'bootstrap/scss/modal';
@import 'bootstrap/scss/navbar';
// @import 'bootstrap/scss/offcanvas';
// @import 'bootstrap/scss/pagination';
// @import 'bootstrap/scss/placeholders';
// @import 'bootstrap/scss/popover';
// @import 'bootstrap/scss/progress';
// @import 'bootstrap/scss/spinners';
// @import 'bootstrap/scss/tables';
// @import 'bootstrap/scss/toasts';
// @import 'bootstrap/scss/tooltip';
@import 'bootstrap/scss/transitions';

// Optional helpers
@import 'bootstrap/scss/helpers';

// Custom Utilities
$utilities: map-merge(
  $utilities,
  (
    // Make an existing utility responsive
    'width':
      map-merge(
        map-get($utilities, 'width'),
        (
          responsive: true
        )
      )
  )
);

// Optional utilities
@import 'bootstrap/scss/utilities/api';

// ------------------- TYPE SCALE GENERATION -------------------

$type-scales: (
  minor-second: 1.067,
  major-second: 1.125,
  minor-third: 1.2,
  major-third: 1.25,
  perfect-fourth: 1.333,
  augmented-fourth: 1.414,
  perfect-fifth: 1.5,
  golden-ratio: 1.618
);

$heading-type-scale-base: minor-third;
$display-type-scale-base: minor-third;

@function check-type-scale-value($scale) {
  @if map-has-key($type-scales, $scale) {
    @return map-get($type-scales, $scale);
  } @else if type-of($scale) == number and unitless($scale) {
    @return $scale;
  } @else {
    @error "Sorry, `#{$scale}` is not a unitless number value or a pre-defined key in the $type-scales map.";
  }
}

@mixin create-heading-type-scale($scale) {
  $the-heading-type-scale: check-type-scale-value($scale);

  $font-size-h6: $font-size-base;
  $font-size-h5: $font-size-h6 * $the-heading-type-scale;
  $font-size-h4: $font-size-h5 * $the-heading-type-scale;
  $font-size-h3: $font-size-h4 * $the-heading-type-scale;
  $font-size-h2: $font-size-h3 * $the-heading-type-scale;
  $font-size-h1: $font-size-h2 * $the-heading-type-scale;
  // $font-size-display-base is made global to allow for accessing the
  // varibale in the next mixin.
  $font-size-display-base: $font-size-h1 !global;

  h1,
  .h1 {
    font-size: $font-size-h1;
  }
  h2,
  .h2 {
    font-size: $font-size-h2;
  }
  h3,
  .h3 {
    font-size: $font-size-h3;
  }
  h4,
  .h4 {
    font-size: $font-size-h4;
  }
  h5,
  .h5 {
    font-size: $font-size-h5;
  }
  h6,
  .h6 {
    font-size: $font-size-h6;
  }
}

@mixin create-display-type-scale($scale) {
  $the-display-type-scale: check-type-scale-value($scale);

  $font-size-display-4: $font-size-display-base + $font-size-base;
  $font-size-display-3: $font-size-display-4 * $the-display-type-scale;
  $font-size-display-2: $font-size-display-3 * $the-display-type-scale;
  $font-size-display-1: $font-size-display-2 * $the-display-type-scale;

  .display-4 {
    font-size: $font-size-display-4;
  }
  .display-3 {
    font-size: $font-size-display-3;
  }
  .display-2 {
    font-size: $font-size-display-2;
  }
  .display-1 {
    font-size: $font-size-display-1;
  }
}

@include create-heading-type-scale($heading-type-scale-base);
@include create-display-type-scale($display-type-scale-base);

// ------------------- TYPE SCALE GENERATION -------------------

// Custom styles
::selection {
  color: var(--bs-primary); /* Text color */
  background-color: rgba(var(--bs-primary-rgb), 0.25); /* Background with 25% opacity */
}

body {
  padding-top: 6rem;
}

.btn-outline-primary:hover {
  color: #fff;
}

.list-group-flush > .list-group-item {
  padding: 0;
}

.accordion-button,
.accordion-body {
  padding: 0;
}

// typography

* {
  font-variant-ligatures: none;
  -webkit-font-feature-settings: 'liga' 0, 'clig' 0;
  font-feature-settings: 'liga' 0, 'clig' 0;
}

/* Heading sizings */
// h1 {
//   font-size: 2.986rem;
// }

// h2 {
//   font-size: 2.488rem;
// }

// h3 {
//   font-size: 2.074rem;
// }

// h4 {
//   font-size: 1.728rem;
// }

// h5 {
//   font-size: 1.44rem;
// }

// h6 {
//   font-size: 1.2rem;
// }

ul {
  padding-left: 1.2rem;
  // margin-bottom: 0;
  list-style-type: square;
}

@media (max-width: 575.98px) {
  .display-1 {
    font-size: 4.5rem; /* shrink from 5rem default */
  }
}
